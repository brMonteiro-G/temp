FROM node:20-alpine@sha256:2ffec31a58e85fbcd575c544a3584f6f4d128779e6b856153a04366b8dd01bb0

WORKDIR /app 

COPY . . 


RUN apk update
RUN apk upgrade
RUN apk add git
RUN sh -c "echo 'https://gitsecret.jfrog.io/artifactory/git-secret-apk/latest-stable/main'" >> /etc/apk/repositories
RUN wget -O /etc/apk/keys/git-secret-apk.rsa.pub 'https://gitsecret.jfrog.io/artifactory/api/security/keypair/public/repositories/git-secret-apk'
RUN apk add --update --no-cache git-secret
RUN apk add ca-certificates




#"@UFABC311!"


# RUN mkdir ~/.ssh

# RUN mv ./id_rsa.pub ~/.ssh/id_rsa.pub
# RUN mv ./id_rsa ~/.ssh/id_rsa
# RUN mv ./known_hosts ~/.ssh/known_hosts

# RUN chmod 400 ~/.ssh/id_rsa


# RUN apk add openssh

# RUN ssh -V

# RUN git clone git@github.com:ufabc-next/ufabc-next-backend.git

# RUN cp ./Access-Member-Keys/public-key.gpg ./
# RUN git secret reveal -p "teste"
# RUN echo .env.production



# Create private key file
#RUN echo ./next-file.gpg > ./private_key.gpg
# Import private key and avoid the "Inappropriate ioctl for device" error
#RUN gpg --batch --yes --pinentry-mode loopback --import private_key.gpg
# Reveal secrets without user interaction and with passphrase. If no passphrase
# is created for the key, remove `-p $GPG_PASSPHRASE`
#RUN git secret reveal -p "@UFABC311!"
# carry on with your build script, secret files are available ...

# RUN cat ./.env.production


